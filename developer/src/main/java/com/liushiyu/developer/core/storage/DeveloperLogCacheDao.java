package com.liushiyu.developer.core.storage;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.liushiyu.developer.core.storage.entry.DeveloperLogCache;
import com.liushiyu.developer.core.storage.entry.DeveloperLogCache.DeveloperLogModelConverter;
import com.liushiyu.developer.model.DeveloperLogModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "com_liushiyu_developer_db_log".
 */
public class DeveloperLogCacheDao extends AbstractDao<DeveloperLogCache, Long> {

    public static final String TABLENAME = "com_liushiyu_developer_db_log";

    /**
     * Properties of entity DeveloperLogCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property DeveloperLogModel = new Property(2, String.class, "developerLogModel", false, "DEVELOPER_LOG_MODEL");
    }

    private DaoSession daoSession;

    private final DeveloperLogModelConverter developerLogModelConverter = new DeveloperLogModelConverter();

    public DeveloperLogCacheDao(DaoConfig config) {
        super(config);
    }

    public DeveloperLogCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"com_liushiyu_developer_db_log\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"DEVELOPER_LOG_MODEL\" TEXT);"); // 2: developerLogModel
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"com_liushiyu_developer_db_log\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeveloperLogCache entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }

        DeveloperLogModel developerLogModel = entity.getDeveloperLogModel();
        if (developerLogModel != null) {
            stmt.bindString(3, developerLogModelConverter.convertToDatabaseValue(developerLogModel));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeveloperLogCache entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }

        DeveloperLogModel developerLogModel = entity.getDeveloperLogModel();
        if (developerLogModel != null) {
            stmt.bindString(3, developerLogModelConverter.convertToDatabaseValue(developerLogModel));
        }
    }

    @Override
    protected final void attachEntity(DeveloperLogCache entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public DeveloperLogCache readEntity(Cursor cursor, int offset) {
        DeveloperLogCache entity = new DeveloperLogCache( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
                cursor.isNull(offset + 2) ? null : developerLogModelConverter.convertToEntityProperty(cursor.getString(offset + 2)) // developerLogModel
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, DeveloperLogCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeveloperLogModel(cursor.isNull(offset + 2) ? null : developerLogModelConverter.convertToEntityProperty(cursor.getString(offset + 2)));
    }

    @Override
    protected final Long updateKeyAfterInsert(DeveloperLogCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(DeveloperLogCache entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeveloperLogCache entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
